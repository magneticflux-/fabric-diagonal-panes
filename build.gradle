import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom' version '0.5-SNAPSHOT'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'org.shipkit.java' version '2.3.5'
}

configurations {
    modShaded
    modImplementation.extendsFrom modShaded
}

repositories {
    maven {
        url = 'https://maven.fabricmc.net/'
        name = 'Fabric'
    }
    jcenter()
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
group = project.maven_group

minecraft {
    accessWidener "src/main/resources/fabric-diagonal-panes.accesswidener"
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.properties "version": project.version,
            "archives_base_name": project.archives_base_name

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version,
                "archives_base_name": project.archives_base_name
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.

// Tasks generated by ShipKit
/*
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

jar {
    from 'LICENSE'
}
*/

// Configure shadowing
shadowJar {
    configurations = [project.configurations.modShaded]
    //relocate "some.library", "my.mod.shadowed.some.library"
}

remapJar {
    dependsOn shadowJar
    input.set((shadowJar as ShadowJar).archiveFile)
    remapAccessWidener.set(true)
}

// Remove the ShipKit publication and recreate it with Fabric artifacts
publishing.publications.getByName('javaLibrary') {
    delegate.artifacts = [remapJar, sourcesJar]
    delegate.getArtifacts() // Force evaluation here. Fails if lazily evaluated later for some reason...
}

// Configure CurseForge publishing
curseforge {
    // Stored in ~/.gradle/gradle.properties
    if (project.hasProperty('curseApiKey'))
        apiKey = project.curseApiKey
    else if (System.getenv('CURSE_API_KEY') != null)
        apiKey = System.getenv('CURSE_API_KEY')
    else
        println 'No CurseForge API key found, \'curseforge\' tasks will not work'

    project {
        id = project.curseforge_id
        releaseType = 'release'
        addGameVersion "$project.minecraft_version"
        addGameVersion 'Fabric'
        setChangelog 'View the changelog here: https://github.com/magneticflux-/fabric-diagonal-panes/blob/develop/docs/release-notes.md'
        mainArtifact(remapJar) {
            displayName = "$archives_base_name-$project.version [$project.minecraft_version]"
            relations {
                requiredDependency 'fabric-api'
            }
        }
        addArtifact sourcesJar
    }
    options {
        forgeGradleIntegration = false
    }
}

afterEvaluate {
    // CurseGradle generates tasks in afterEvaluate for each project
    // There isn't really any other way to make it depend on a task unless it is an AbstractArchiveTask
    def curseforgeTask = tasks.getByName("curseforge${project.curseforge_id}")
    curseforgeTask.dependsOn publish
    curseforgeTask.dependsOn remapJar
    tasks.getByName('bintrayPublish').dependsOn curseforgeTask
}
